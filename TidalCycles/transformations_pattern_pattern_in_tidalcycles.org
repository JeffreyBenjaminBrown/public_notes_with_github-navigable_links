:PROPERTIES:
:ID:       ae8d6109-5878-4c2e-b2b7-a6aacb980687
:END:
#+title: transformations (Pattern -> Pattern) in TidalCycles
* there are also some [[https://github.com/JeffreyBenjaminBrown/public_notes_with_github-navigable_links/blob/master/TidalCycles/randomness_in_tidalcycles.org][random ones]]
* BROKEN: [[https://github.com/JeffreyBenjaminBrown/public_notes_with_github-navigable_links/blob/master/TidalCycles/flatpat_pattern_of_lists_pattern_of_simultaneous_events.org][flatpat :: pattern of lists -> pattern of simultaneous events]]
* BROKEN : [[https://github.com/JeffreyBenjaminBrown/public_notes_with_github-navigable_links/blob/master/TidalCycles/quantise_n_pat_rond_values_in_pat_to_multiples_of_n.org][quantise n pat : rond values in pat to multiples of n]]
* [[https://github.com/JeffreyBenjaminBrown/public_notes_with_github-navigable_links/blob/master/TidalCycles/dividing_patterns_in_Tidal.org][dividing patterns in Tidal]]
* hurry is like fast, but with a speed transformation
* palindrome p = p, then reverse p
  so twice as long as p
** [[https://github.com/JeffreyBenjaminBrown/public_notes_with_github-navigable_links/blob/master/TidalCycles/conjugate_a_palindrome.org][conjugate a palindrome]]
* granular effects
** chop n
#+begin_src haskell
  d1 $ chop ((irand 16 + 1) * 64) $ sound "bev"
#+end_src
** striate n : "like chop n" (???)
#+begin_src haskell
  d1 $ striate 2 $ sound "bev"
#+end_src
** randslice n : choose one of n slices randomly
#+begin_src haskell
  d1 $ randslice 16 $ sound "numbers*64" |* n (irand 10)
#+end_src
** loopAt n : stretch sample to fit n cycles
#+begin_src haskell
  d1 $ stack [
    loopAt 8 $ sound "bev",
    every 4 (fast 2 . (<~) (1/4))
      $ slow 4 $ palindrome $ fast 4
      $ s "bd [sn:1*2 [[hc*2] [bd,lt*2]]/2]/2",
    slow 4 $ (1/4) <~ s "gabba sn:1"
      |*| speed "0.5 0.25"
      |*| amp 0.2 ]
#+end_src
